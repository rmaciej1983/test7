/*	String sql = "CREATE TABLE PROBLEMS("
	        			+ "PROBLEM_ID SERIAL NOT NULL, "
	        			+ "NAME VARCHAR(20) NOT NULL, "	        			
	        			+ "CONSTRAINT PK_PROBLEM PRIMARY KEY (PROBLEM_ID)"
	        			+ ")";	       
	        			
	String sql = "CREATE TABLE GENERATORS("
	        			+ "GENERATOR_ID SERIAL NOT NULL, "
	        			+ "PROBLEM_ID SERIAL NOT NULL, "    
	        			+ "GATE_ID SERIAL NOT NULL, "  			
	        			+ "CONSTRAINT PK_GENERATOR PRIMARY KEY (GENERATOR_ID)"
	        			+ ")";
	        			
	String sql = "CREATE TABLE RECOGNIZERS("
	        			+ "RECOGNIZER_ID SERIAL NOT NULL, "
	        			+ "PROBLEM_ID SERIAL NOT NULL, "    
	        			+ "GATE_ID SERIAL NOT NULL, "  			
	        			+ "CONSTRAINT PK_RECOGNIZER PRIMARY KEY (RECOGNIZER_ID)"
	        			+ ")";
*/

package polynomialtransformations.PolynomialTransformations;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

@RefreshScope
@Controller
public class ProblemsController {
	
	@Autowired
	private ProblemRepository problemRepository;
	
	@Autowired
	private GeneratorRepository generatorRepository;
	
	@Autowired
	private RecognizerRepository recognizerRepository;
	
	private String problemName;	
	private String [] generators;
	private String [] recognizers;	
	
	@Value("${algorithm:0}")
	private int algorithm;
	
	private List<ComputesInterface> computes = new ArrayList<ComputesInterface>();	
	
	ProblemsController() throws BeansException, IOException {
		ApplicationContext factory = new ClassPathXmlApplicationContext(new FileSystemResource("beans.xml").getURI().toString());
		computes.add((ComputesInterface) factory.getBean("computes"));	
		computes.add((ComputesInterface) factory.getBean("computes2"));	
	}	
	
	@RequestMapping("/problems/index")
	public String index() {
		return "problemsMenu";
	}
	
	@ResponseBody
	@RequestMapping("/problems/generate")
	public String generate() {		
		List<Problem> problems = problemRepository.findAll();	
		
		Form form = new Form("/problems/generated");
		form.addWidgets(new Caption("Select problem:"));				
		for(Problem problem : problems) {	
			form.addWidgets(new Radio("problem", problem.getName(), problem.toString()));		
		}	
		form.addWidgets(new Submit("OK"));		
		
		return form.generate();
	}
	
	@ResponseBody
	@RequestMapping("/problems/generated")
	public String generated(String problem) {			
		List<Problem> problems = problemRepository.findByName(problem);
		Problem p = problems.get(0);	
		Problem newP = computes.get(algorithm).generate(p);			
		List<Generator> generators = newP.getGenerators();
		List<Recognizer> recognizers = newP.getRecognizers();	
		
		Form form = new Form("/problems/addAll");
		form.addWidgets(new Text("problemName", newP.getName()));
		form.addWidgets(new Caption("Generators:"));
		for(Generator generator : generators) {
			String gateName = generator.getGate().getName();
			String gateSignature = generator.getGate().getSignature();
			form.addWidgets(new Text("gate", gateName), new Text("gate", gateSignature, true));
		}
		form.addWidgets(new Hidden("gate", "|"));
		form.addWidgets(new Caption("Recognizers:"));		
		for(Recognizer recognizer : recognizers) {
			String gateName = recognizer.getGate().getName();
			String gateSignature = recognizer.getGate().getSignature();
			form.addWidgets(new Text("gate", gateName), new Text("gate", gateSignature, true));				
		}
		form.addWidgets(new Submit("Save"), new Br());	
		form.addWidgets(new Link("/problems/generate", "back"));

		return form.generate();
	}
	
		
	@RequestMapping("/problems/add")
	public String add() {
		return "addProblem";
	}
	
	@ResponseBody	
	@RequestMapping("/problems/addAll")
	public String addAll(String problemName, String...gate) {
		
		//Add gates.
		boolean readGenerators = true;
		int paramsCount = gate.length;
		List<String> genNames = new ArrayList<String>();
		List<String> recNames = new ArrayList<String>();
		for(int i = 0; i < paramsCount; i += 2) {
			if(gate[i].equals("|")) {
				readGenerators = false;
				--i;
				continue;
			}
			saveGate(gate[i], gate[i + 1]);
			if(readGenerators) {
				genNames.add(gate[i]);
			} else {
				recNames.add(gate[i]);
			}
			
		}
		
		//Add problem.
		Problem p = new Problem();
		p.setName(problemName);
		problemRepository.save(p);
		
		//Add generators to this problem.
		for(String genName : genNames) {			
			Generator gen = new Generator(p, getGate(genName));
			p.addGenerator(gen);
			generatorRepository.save(gen);
		}
				
		//Add recognizers to this problem.
		for(String recName : recNames) {			
			Recognizer rec = new Recognizer(p, getGate(recName));
			p.addRecognizer(rec);
			recognizerRepository.save(rec);
		}
		
		return "Problem added";
	}
	
	@ResponseBody	
	@RequestMapping("/problems/added")
	public String added(String...gate) {
		recognizers = Arrays.copyOf(gate, gate.length);	
		
		//Add problem.
		Problem problem = new Problem();
		problem.setName(problemName);
		problemRepository.save(problem);
		
		//Add generators to this problem.
		for(String genName : generators) {			
			Generator gen = new Generator(problem, getGate(genName));
			problem.addGenerator(gen);
			generatorRepository.save(gen);
		}
		
		//Add recognizers to this problem.
		for(String recName : recognizers) {			
			Recognizer rec = new Recognizer(problem, getGate(recName));
			problem.addRecognizer(rec);
			recognizerRepository.save(rec);
		}
		
		return "Problem added";
	}	
	
	@ResponseBody
	@RequestMapping("/problems/generators")
	public String generators(String name) {		
		problemName = name;		
		String [] gates = getGates();
		
		Form form = new Form("/problems/recognizers");
		form.addWidgets(new Caption("Generators:"));		
		for(int i = 0; i < gates.length; ++i) {
			int index = gates[i].indexOf(' ');
			String gateName = gates[i].substring(0, index);	
			form.addWidgets(new CheckBox("gate", gateName, gates[i]));				
		}
		form.addWidgets(new Submit("OK"));		
		
		return form.generate();
	}
	
	@ResponseBody	
	@RequestMapping("/problems/recognizers")
	public String makeRecognizers(String...gate) {
		generators = Arrays.copyOf(gate, gate.length);
		String [] gates = getGates();
		
		Form form = new Form("/problems/added");
		form.addWidgets(new Caption("Recognizers:"));		
		for(int i = 0; i < gates.length; ++i) {
			int index = gates[i].indexOf(' ');
			String gateName = gates[i].substring(0, index);			
			form.addWidgets(new CheckBox("gate", gateName, gates[i]));	
		}
		form.addWidgets(new Submit("OK"));		
		
		return form.generate();
	}
	
	@ResponseBody	
	@RequestMapping("/problems/list")
	public String list() {	
		
		MyClass o = new MyClass();
		o.makeSomething((a, b) -> a + b);	//Test.
		
		List<Problem> problems = problemRepository.findAll();		
		String body = "";
		for(Problem problem : problems) {
			body += problem.toString() + "<br/>";
		}		
		return body;
	}	
	
	@ResponseBody	
	@RequestMapping("/problems/delete")
	public String delete() {		
		List<Problem> problems = problemRepository.findAll();
		
		Form form = new Form("/problems/deleted");
		form.addWidgets(new Caption("Problems to delete:"));				
		for(Problem problem : problems) {	
			form.addWidgets(new CheckBox("problem", problem.getName(), problem.toString()));			
		}
		form.addWidgets(new Submit("OK"));		
		
		return form.generate();		
	}
	
	@ResponseBody	
	@RequestMapping("/problems/deleted")
	public String deleted(String...problem) {
		for(String name : problem) {
			List<Problem> problems = problemRepository.findByName(name);
			List<Generator> genToDelete = generatorRepository.findByProblem(problems.get(0));		
			for(Generator gen : genToDelete) {
				generatorRepository.delete(gen.getId());
			}
			List<Recognizer> recToDelete = recognizerRepository.findByProblem(problems.get(0));
			for(Recognizer rec : recToDelete) {
				recognizerRepository.delete(rec.getId());
			}
			problemRepository.delete(problems.get(0).getId());			
		}		
		return "Selected problems deleted";
	}
	
	private String [] getGates() {	
		
		RestTemplate restTemplate = new RestTemplate();
			
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

		UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://localhost:8080/gates/getGates");		   	    	
			
		HttpEntity<?> entity = new HttpEntity<String []>(headers);	
		
		Class<?> clazz = String.class;	
		Class<?> arrayClass = Array.newInstance(clazz, 0).getClass();
		ResponseEntity<String []> response = (ResponseEntity<String []>) restTemplate.exchange(builder.build().encode().toUri(), HttpMethod.GET, entity, arrayClass);	
			
		return response.getBody();	
	 }
	
	 private Gate getGate(String name) {	
		
		RestTemplate restTemplate = new RestTemplate();
			
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

		UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://localhost:8080/gates/getGate")
									   .queryParam("name", name);		   	    	
			
		HttpEntity<?> entity = new HttpEntity<Gate>(headers);			
		
		ResponseEntity<Gate> response = (ResponseEntity<Gate>) restTemplate.exchange(builder.build().encode().toUri(), HttpMethod.GET, entity, Gate.class);	
			
		return response.getBody();	
	 }
	 
	 private void saveGate(String name, String signature) {	
			
		RestTemplate restTemplate = new RestTemplate();
				
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

		UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://localhost:8080/gates/added/1")
									   .queryParam("name", name)
									   .queryParam("signature", signature);	
				
		HttpEntity<?> entity = new HttpEntity<String>(headers);			
			
		restTemplate.exchange(builder.build().encode().toUri(), HttpMethod.GET, entity, String.class);				
	 }
	
}

Test
